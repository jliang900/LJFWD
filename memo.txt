01234567890123456789012345678901234567890123456789012345678901234567890123456789
*******************
[LJWD]

Learn Java for Web Development
by Vishal Layka

*******************
[MySQL]

After downloading and unzipping, original files are placed under
/usr/local/mysql-5.6.24-osx10.8-x86_64/, and following instructions in
/usr/local/mysql-5.6.24-osx10.8-x86_64/INSTALL-BINARY, a symbolic link is
created at /usr/local/mysql.

It is suggested to create group mysql and user mysql. However on Mac OS there is
not groupadd nor useradd commands as in other linux. Instead 'dscl' is the way
to go, and it is quite complicated. I did not follow it. I simply used chown and
as a result it seemed to create _mysql group and _mysql user.

After running /usr/local/mysql/scripts/mysql_install_db, mysql sets up its db.
See /usr/local/mysql/install.20150505.log for more details.

Password for root and jliang: 12051063
Start mysql:
$cd /usr/local/mysql-5.6.24-osx10.8-x86_64
$sudo ./bin/mysqld_safe&
Stop mysql:
$sudo /usr/local/mysql-5.6.24-osx10.8-x86_64/bin/mysqladmin -u root -p shutdown
Login mysql:
$/usr/local/mysql-5.6.24-osx10.8-x86_64/bin/mysql -u jliang -p

*******************
[Tomcat]

The original distribution file is downloaded at
/Volumes/Macintosh\ HD/Workspace/Download/DEV/apache-tomcat-8.0.21.tar.gz.

The distribution is then unzipped to /usr/local/apache-tomcat-8.0.21/ and a
symbolic link is created as /usr/local/tomcat/.

Start tomcat:
$/usr/local/tomcat/bin/startup.sh
Stop tomcat:
$/usr/local/tomcat/bin/shutdown.sh
Verify:
Visit 127.0.0.1:8080 in a browser.
Visit localhost:8080 in a browser.

*******************
[MySQL [Abandoned connection cleanup thread] in Tomcat]

MySQL connector/J 5.1.26
MySQL 5.6.24
Tomcat 8.0.21

When I test the "booksWeb" project ("Learn Java for Web Development"), tomcat
reports in catalina.log a WARNING that "The web applicaation [booksWeb] appears
to have started a thread named [Abandoned connection cleanup thread] but has
failed to stop it. This is very likely to create a memory leak."

After some study online, it seems that this thread is started by MySQL in a
static initiation, and may be responsible for clean up mysql connections. How-
ever, somehow this thread is not closed properly, or at least Tomcat thinks so.

According to "http://forums.mysql.com/read.php?3,585600,585600", MySQL con/J
5.1.25 has fixed it. It states that:

* Tomcat would fail to stop abandoned connection cleanup
    threads. The fix for Bug#65909 introduced the ability to stop
    daemon threads started by the Connector/J driver but it also
    cleared references from daemon threads to the parent
    classloader. When the clearReferencesStopThreads property is
    set to "true" in context.xml, Tomcat analyzes classloaders to
    detect and stop lost threads. This fix ensures that abandoned
    connection cleanup threads retain a reference to the parent
    classloader. (Bug #68556, Bug #16443387)
    
Nevertheless, I still observe the WARNING.

Solutions on the web has two main flavors, as this thread reveals:
http://stackoverflow.com/questions/11872316/tomcat-guice-jdbc-memory-leak.
One school proposes to have a context listener or something similar explicitly
shut down this thread. There are various ways to do it. The other school, which
I followed and preferred, simply alters the server.xml for Tomcat, directing its
JreMemoryLeakPreventionListener to handle com.mysql.jdbc.NonRegisteringDriver:

  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"   
        classesToInitialize="com.mysql.jdbc.NonRegisteringDriver"/>

This directive removed the WARNING without adding any code in JSP or web.xml.

However, this requires tomcat to load mysql jdbc lib before loading any web
applications, and therefore it needs the mysql jdbc jar file in tomcat lib/
folder.

Some brief online study suggests the following:
1. some people prefer putting mysql jdbc jar file in each web app's lib/,
so that they could use different versions if needed;
2. others want a connection polled JNDI datassource to improve performance,
so they put it in tomcat lib/;
3. it is said the jar in WEB-INF/lib/ would override the one in tomcat/lib/
for that particular web app;

(But, if the two jar files are of different version, I am not sure if the
NonRegisteringDriver class in the jar that tomcat has can work with the  
[Abandoned connection cleanup thread] started by the jar of the web app.

After all, since I expect to have a pooled JNDI datasource in the future,
I decided to put the jar in tomcat/lib/. This works fine with the samples in
the early chapters in LJWD. These samples directly use DriverManager#getConnection()
method, and all it asks is the mysql jdbc jar in class path.

*******************
[Deploy a web application in Tomcat]

1. Generate WAR file. E.g., export it from within eclipse.
2. Copy the WAR file to /usr/local/tomcat/webapp/. Restart Tomcat.
3. Or, better yet, from Tomcat Manager (web GUI) deploy the WAR file.
Either way, Tomcat would copy the WAR to the webapp/ folder, and for abc.war it
would unzip it to abc/ folder, which holds contents like META-INF/, WEB-INF/,
jsp/, css/, js/, etc.

*******************
[Include supporting jar libraries]

For example, to have mysql support, Tomcat need mysql-connector-{version}.jar.
One way is to have it in $CATALINA_HOME/lib. This would make it visible to all
applications in Tomcat. Not so good if different applications need different
versions of it. The better way is to have it deployed into $CATALINA_HOME/
webapps/$YOUR_APP/WebContent/WEB-INF/lib/ for each application that need it. If
it is placed in the $YOUR_ECLIPSE_PROJ_ROOT/WebContent/WEB-INF/lib/, eclipse
would pack it within the war file. When Tomcat deploy that war file, the jar
is unpacked into $CATALINA_HOME/webapps/$YOUR_APP/WebContent/WEB-INF/lib/.

Similarly, to have JSTL support, place jstl-{ver}.jar and standard-{ver}.jar
in .../WEB-INF/lib/ as well. Without them, Tomcat would report that JVM cannot
find/create some class(es) like org.apache.jsp.book_jsp, where book.jsp has
some references to jstl like:

<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

If Maven is used to manage the dependencies, I don't need to manually place jar
files in the .../lib/ folder. Instead, I would list the supporting libraries in
my POM file and Maven would automatically pull them and pack them into my war.

One interesting and important minute is that, at first I placed two symlinks of
jstl-{ver}.jar and standard-{ver}.jar in .../WEB-INF/lib/, and that was all
right with compiling, packaging and execution. However, that left eclipse in
confusion and it showed me red crosses with all Expression Language (EL) state-
ments. For example:

<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>
...
            <td>${fn:escapeXml("<%=author.getName()%>")}</td>
...

Eclipse complained that "the function 'fn:escapeXml' is undefined." After I
replaced the symlinks with the real jar files, this error message disappeared.

*******************
[JSP]

- JSP files should be placed under WEB-INF/{optional_subfolder/}.
- If a servlet-mapping is defined to map a url-pattern to a servlet, and this
servlet then creates a RequestDispatcher with a JSP file as the url, then
forward() the request to this url, then this JSP would be processed by the web
container (e.g., tomcat).
- Or, a browser could point directly to an url such as http://.../xxx.jsp, and
typically for a asp residing in WebContent/somepath/x.jsp, it could be referenced
as http://host.name/webappname/somepath/x.jsp.
- Thus, it is a question how to prevent user from pointing a browser directly to
a jsp which should be invisible.

*******************
[Maven]

Maven 3.0.3 comes with my Mac OS 10.8.2. Eclipse Luna comes with Maven plugin.

At first when I tried to use eclipse to create a maven project of
maven-archetype-webapp type, it failed with the following error:

Could not resolve archetype org.apache.maven.archetypes:maven-archetype-webapp:RELEASE from any of the configured repositories.
Could not resolve artifact org.apache.maven.archetypes:maven-archetype-webapp:pom:RELEASE
Failed to resolve version for org.apache.maven.archetypes:maven-archetype-webapp:pom:RELEASE: Could not find metadata org.apache.maven.archetypes:maven-archetype-webapp/maven-metadata.xml in local (/Users/jliang/.m2/repository)
Failed to resolve version for org.apache.maven.archetypes:maven-archetype-webapp:pom:RELEASE: Could not find metadata org.apache.maven.archetypes:maven-archetype-webapp/maven-metadata.xml in local (/Users/jliang/.m2/repository)

Online search pointed to several directions, including
* downloading the maven-archetype-webapp-{ver}.jar and register it with maven so
that maven has it in the local repository.
* creating the correct proxy settings in maven user setting file (typically
~/.m2/setting.xml).
* http://www.tuicool.com/articles/36FFBv, adding a mirror site.

I didn't try the first approach since it de-automated the process. I fixed the
proxy settings but it doesn't solve the problem. The third one worked:

<mirrors>
	<mirror>
		<id>ibiblio.org</id>
		<name>ibiblio Mirror of http://repo1.maven.org/maven2/</name>
		<url>http://mirrors.ibiblio.org/pub/mirrors/maven2</url>
		<mirrorOf>central</mirrorOf>
	</mirror>
</mirrors>

*******************
[Git, Eclipse, and Maven]

What files should be checked into git? Some people choose to include eclipse
(or other IDE alike) specific files such as .classpath, .project, .settings/*.pref, so that once checked out it is *IMMEDIATELY* usable. Some choose not to
include them so that the project is IDE independent. With the help of maven,
a reasonable solution is to check in pom.xml and have git ignore other IDE files
with the help of .gitignore. Once checked out, maven could happily create the
eclipse files for you ($>mvm eclipse:eclipse).

*******************
[Maven template based projects]

Maven can create project skeletons based on many prebuilt templates, such as
maven-archetype-webapp. Note, however, that in my trial, the project is set to
be compatible with java1.5. I have jre/jdk 1.8 installed, so eclipse complains
that some incompatibility. I changed the java 1.5 to java 1.8 in the project facet (project property) and that is gone.

Another thing is that I need to manually add tomcat lib into eclipse java build
path, otherwise eclipse would complain about not able to resolve references to
javax.servlet.http.HttpServlet. Not a surprise, as neither maven nor eclipse
knows if I have tomcat lib or if I want to include it in the build path.

*******************
[welcome-file-list]

In "struts2bookstore" sample, the instruction mentions adding a <welcome-file-
list/> section into the web.xml. However, it does not specify the insertion
position. At first I tried it before the <filter/> and <filter-mapping/>,
which made eclipse complain. I misunderstood the message, thinking that this
<welcome-file-list/> may be incompatible with my environment, so I removed it.
That was fine, no complaints, and tomcat starts ok. But when visiting the
http://localhost:8080/struts2bookstore url, struts reports:

There is no Action mapped for namespace [/] and action name [] associated with context path [/struts2bookstore]

After struggling for a while, I accidentally put back the <welcome-file-list/>
section into web.xml, this time after <filter-mapping/>. Aha, it worked all
right now. But here is the question: why?

I believe the answer is that without the specified welcome-file, it defaults to
index.jsp (which is present in helloworldStruts2 sample). Since index.jsp does
not exist, thus the error. However, it is not clear why struts report an error,
not tomcat. After all, the web.xml is for tomcat. It seems that tomcat finds
no index.jsp, and somehow hands the problem to struts, and struts reports it.

Another problem is that while it works on the browser side, tomcat still throws
a warning saying that:

WARNING: couldn't clear tomcat cache
java.lang.NoSuchFieldException: resourceEntries

According to http://www.haosearch.com/technologyquestionsandanswers/java/
2014-12-19-51375.html, in com.opensymphony.xwork2.util.LocalizedTextUtil struts
has WebappClassLoader work on resourceEntries. However, tomcat8 had some change
with org.apache.catalina.loader.WebappClassLoader such that it does not support
resourceEntries, while tomcat7 behaves ok. So the suggestion is to use tomcat7.

I didn't verify that. But I did some test and found that in login.jsp, two lines

	<s:textfield name="username" key="label.username" size="30" />
	<s:password name="password" key="label.password" size="30" />

caused the problem. They both correspond to some text edit control, and maybe
they triggered com.opensymphony.xwork2.util.LocalizedTextUtil.

*******************
[login.action or login]

In login.jsp, the following lines:
<%@ taglib prefix="s" uri="/struts-tags"%>
	<s:form action="login.action" method="post">
	...
	</s:form>

causes a warning from struts2, saying that:
WARNING: No configuration found for the specified action: 'login.action' in namespace: ''. Form action defaulting to 'action' attribute's literal value.

Online search indicates that it should be:
	<s:form action="login" ...

and then the warning is gone.

*******************
[HTML <form/>]

The <form/> structure supports a collection of one-line text boxes and multi-line text areas, checkboxes, radio button groups, drop down lists, multi-selection lists, and finally, submit buttons.

Each control can have a unique id. They can have names, not necessarily unique. For radio buttons, those with the same name are grouped together. Each can have a value, not limited in anyway.

Ids are used mostly at the client side, i.e., the browsers, to uniquely identify a control, which is useful with CSS or JS. Names and values, on the other side, are used mostly on the server side, when they are submitted via HTTP POST and presented in the URL as {name}={value} sequences.

*******************
[Enable Expression Language]

EL support was introduced in JSTL 1.0. Originally it can only be used within JSTL tags,
such as

<c:out value="${ 3 + 7}">

Since JSP2.0/Servlet2.4, EL is fully supported in everywhere in a JSP file, such as

<p>Hi, 2+2=${2+2}</p>

However, sometimes out of the box EL does not work due to one or more of the following:

1. Application server in question doesn't support JSP 2.0.
2. The web.xml is not declared as Servlet 2.4 or higher.
3. The @page is configured with isELIgnored=true.
4. The web.xml is configured with <el-ignored>true</el-ignored> in <jsp-config>.

In my case, the default web.xml created by maven-archetype-webapp looks like:

<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
    <!-- Here you go. -->
</web-app>

To declare Servlet 2.4 or higher, it should look like:

<?xml version="1.0" encoding="UTF-8"?>
<web-app
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
    id="WebApp_ID"
    version="3.1">

    <!-- Here you go. -->

</web-app>

*******************
[How web.xml, struts.xml and tiles.xml work together]

Firstly, tomcat is the outmost web container which receives all HTTP requests, therefore
web.xml is the first decision layer. For example, the <welcome-file-list/> defines the
default local files to be processed and presented by tomcat, when a request has no local
path part, such as http://{ip}:{port}/{appname}. Also, web.xml very likely would define <servlet/> and <servlet-mapping/> tags, or <filter/> and <filter-mapping/> tags, so that
local paths like "/book" could be dispatched to the appropriate servlet or filter. A
servlet or a filter is nothing but a java class. A servlet class typically derives from
HttpServlet class, and in Struts2 framework StrutsPrepareAndExecuteFilter is the typical
filter class.

With StrutsPrepareAndExecuteFilter in web.xml and typically it is mapped to "/*" path,
Struts2 can capture all HTTP requests. Then it comes to the struts.xml (and other custom
struts configurations maybe) how these requests would be handled. Struts.xml defines
actions and action handler java classes. These handlers all return a string. Struts.xml
defines the next steps depending on the returned string. For example, if "success" is
returned, "/view/home.jsp" is the next step, then it is fed to tomcat.

Struts2 supports <result-types> directives to customize the view rendering. Tiles is one
such result renderer. Now, if "success" is returned by an action handler, and struts.xml
says that Tiles should handle the result, Struts2 would pass the result text (e.g.,
"home") to Tiles. In tiles.xml, a <definition> exists for "home", and it describes some
tile elements. These elements are referenced in some JSP files. These JSP files are processed by Tiles engine (a jar file) and these elements are interpreted accordingly.

Note that tomcat has the initial control. It hands the control to Struts2 engine (jar)
based on web.xml definition. Struts2 engine hands the control to Tiles engine because of
struts.xml direction. Finally Tiles processes the JSP files. It's not clear if Tiles only
process the tiles related part of the JSP, and hands back the rest to Struts2/tomcat to
finish the work. This makes sense, though.

Last thing, the Tiles result handling class is org.apache.struts2.views.tiles.TilesResult,
indicating that it is part of Struts2.
 

